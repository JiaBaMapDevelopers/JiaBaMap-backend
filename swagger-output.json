{
  "swagger": "2.0",
  "info": {
    "title": "JiabaMap Backend API",
    "description": "This is the API document of JiabaMap API which conforms to OpenAPI and rendered by Swagger UI.",
    "version": "1.0.0"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/restaurants/search": {
      "get": {
        "summary": "Search restaurants for the keyword",
        "description": "Endpoint to search 15 restaurants from Google API based on the keyword and the coordinate",
        "parameters": [
          {
            "name": "keyword",
            "in": "query",
            "description": "The keyword to be searched by user",
            "required": true,
            "type": "string"
          },
          {
            "name": "lat",
            "in": "query",
            "description": "The latitude to be searched by user",
            "required": true,
            "type": "string"
          },
          {
            "name": "lng",
            "in": "query",
            "description": "The longitude to be searched by user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/restaurants/staticmap": {
      "get": {
        "summary": "Get staticmap image",
        "description": "Endpoint to get staticmap image from Google API given by the location",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "description": "The latitude to be searched by user",
            "required": true,
            "type": "string"
          },
          {
            "name": "lng",
            "in": "query",
            "description": "The longitude to be searched by user",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/restaurants/{id}": {
      "get": {
        "summary": "Get place detail information",
        "description": "Endpoint to get detail information of a place from Google API",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of a place assigned by Google Places API"
          }
        ],
        "responses": {
          "200": {
            "description": "Get place detail successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "displayName": {
                  "type": "string",
                  "example": "鮨荻 sushi ogi"
                },
                "rating": {
                  "type": "number",
                  "example": 4.7
                },
                "userRatingCount": {
                  "type": "number",
                  "example": 41
                },
                "startPrice": {
                  "type": "string",
                  "example": "2000"
                },
                "endPrice": {},
                "weekDayDescriptions": {
                  "type": "array",
                  "example": [
                    "星期一: 休息",
                    "星期二: 12:00 – 14:30, 18:00 – 21:30",
                    "星期三: 12:00 – 14:30, 18:00 – 21:30",
                    "星期四: 12:00 – 14:30, 18:00 – 21:30",
                    "星期五: 12:00 – 14:30, 18:00 – 21:30",
                    "星期六: 12:00 – 14:30, 18:00 – 21:30",
                    "星期日: 休息"
                  ],
                  "items": {
                    "type": "string"
                  }
                },
                "formattedAddress": {
                  "type": "string",
                  "example": "104004台灣台北市中山區天津街21號"
                },
                "websiteUri": {
                  "type": "string",
                  "example": "https://www.facebook.com/Sushiogi/"
                },
                "nationalPhoneNumber": {},
                "googleMapsUri": {
                  "type": "string",
                  "example": "https://maps.google.com/?cid=10555472622014893236"
                },
                "openNow": {
                  "type": "boolean",
                  "example": false
                },
                "photoIds": {
                  "type": "array",
                  "example": [
                    "places/ChIJXb0k11GpQjQRtAyPp2ySfJI/photos/AdDdOWpEd8Nnf4pdqwGqklFuTnLL5v2tEO3Pzs00AONzEElI4ABs3Dp4J6aiQiXxr9eTbQ5O6pnENPKrGDSZXN4s1DL6gP33hGtcZuzqhpfji0hNWPo6U80iIMltTWctOaER8CYm0QrU22N4tyjM-8boOp14sdsho8CpSbrA",
                    "places/ChIJXb0k11GpQjQRtAyPp2ySfJI/photos/AdDdOWrntO0i8qHHIxs2ZCNdvJBmBYSpWW3UhK0kJLouTusr91-Fn5zsR75NIytST4JyxSnnLw0RYeSSa-Clehi6TuE_acnMjzfREAFq_VWAO_9I6pmG1AcJZZkCzxOAy8cssKOtQA2qoawMSR5nDCFKm9nxZkT14OE6RdnL"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/restaurants/photos/{id}": {
      "get": {
        "summary": "Get photo",
        "description": "Endpoint to get a photo from Google API given by the photo ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The ID of a photo assigned by Google Places API"
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/comments/restaurant/{placeId}": {
      "get": {
        "summary": "Search comments of the same restaurant",
        "description": "Endpoint to search comments based on the placeId",
        "parameters": [
          {
            "name": "placeId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The placeId of restaurant"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/user/{userId}": {
      "get": {
        "summary": "Search comments of the same user",
        "description": "Endpoint to search comments based on the userId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The userId of user"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/comments/": {
      "post": {
        "summary": "Create a new comment",
        "description": "Create a new comment for a specific place by a user. The comment includes userId, placeId, content, and rating.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The details of the comment to be created.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "string"
                },
                "placeId": {
                  "type": "string",
                  "example": "string"
                },
                "content": {
                  "type": "string",
                  "example": "string"
                },
                "rating": {
                  "type": "string",
                  "example": "number"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/comments/{id}": {
      "put": {
        "summary": "Update comment",
        "description": "Update the comment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the comment"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                },
                "placeId": {
                  "example": "any"
                },
                "content": {
                  "example": "any"
                },
                "rating": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "delete": {
        "summary": "Delete comment",
        "description": "Delete the comment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the comment"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/comments/likes/{id}": {
      "put": {
        "summary": "Update likes",
        "description": "Update the likes of comment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the comment"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "likes": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/articles/": {
      "get": {
        "description": "",
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                },
                "placeId": {
                  "example": "any"
                },
                "title": {
                  "example": "any"
                },
                "content": {
                  "example": "any"
                },
                "photo": {
                  "example": "any"
                },
                "location": {
                  "example": "any"
                },
                "price": {
                  "example": "any"
                },
                "openHours": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/articles/{id}/like": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/articles/{id}/comments": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "example": "any"
                },
                "userId": {
                  "example": "any"
                },
                "user": {
                  "example": "any"
                },
                "userPhoto": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/articles/{articleId}/comments/{commentId}": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/articles/{articleId}/comments/{commentId}/like": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/articles/{articleId}/comments/{commentId}/replies": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "example": "any"
                },
                "userId": {
                  "example": "any"
                },
                "user": {
                  "example": "any"
                },
                "userPhoto": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/articles/{articleId}/comments/{commentId}/replies/{replyId}": {
      "delete": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/articles/{articleId}/comments/{commentId}/replies/{replyId}/like": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "commentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "replyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/update/{id}": {
      "put": {
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/user/login/google": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "credential": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/user/logout": {
      "post": {
        "description": "",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "example": "any"
                },
                "name": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  }
}